<#@ template language="C#" inherits="TypeScriptTemplateBase<Intent.Modelers.Types.ServiceProxies.Api.ServiceProxyModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modelers.Types.ServiceProxies.Api" #>

import { <#= Model.Name.ToPascalCase() #> } from "@/services/<#= Model.Name.ToKebabCase() #>.proxy";

export const use<#= Model.Name.ToPascalCase() #>Proxy = () => {

  const <#= Model.Name.ToCamelCase().Pluralize() #> = new <#= Model.Name.ToPascalCase() #>();

  return { 
<#
foreach (var operation in Model.Operations)
{
#>
    <#= operation.Name.ToCamelCase() #> : <#= Model.Name.ToCamelCase().Pluralize() #>.<#= operation.Name.ToCamelCase() #>,
<#
  }
#>
    };
}