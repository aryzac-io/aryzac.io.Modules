<#@ template language="C#" inherits="TypeScriptTemplateBase<Aryzac.IO.Modules.Client.Api.LabelModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Aryzac.IO.Modules.Client.Api" #>

<#= DtoTypeImports #>

export const use<#= Model.InternalElement.GetFirstParentOfType(ComponentModel.SpecializationTypeId).Name.ToPascalCase()#><#= Model.Name.ToPascalCase() #>Options = async (
<#= GetMethodSignature() #> 
) => {

const { t } = useI18n();

<#
  var labelField = "";
            
  var mappedColumn = Model.InternalElement.ParentElement.ParentElement.Mappings.FirstOrDefault()?.MappedEnds.FirstOrDefault(m => m.MappingTypeId == "d9cb10dc-82ed-4378-8385-e9cc8be76c40" && m.TargetElement.SpecializationType == "Label" && m.TargetElement.Id == Model.Id);
#>
const label = computed(() => {
<#
  if (mappedColumn is not null) { 
    var mappedExpression = mappedColumn.MappingExpression;
    foreach (var source in mappedColumn.Sources)
    {
      mappedExpression = mappedExpression.Replace($"{{{source.ExpressionIdentifier}}}", $"${{{source.Element.Name.ToPascalCase().ToCamelCase()}}}");
#>
  const <#= source.Element.Name.ToPascalCase().ToCamelCase() #> = model.<#= source.Element.Name.ToPascalCase().ToCamelCase() #> || '';
<#  } #>
  const mappedExpression = `<#= mappedExpression #>`;
  return mappedExpression;
<# } else { #>
  return "";
<# } #>
});

return {
  label
};

}