<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modelers.Types.ServiceProxies.Api" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Modules.Metadata.WebApi.Models" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Aryzac.IO.Modules.Client.Api" #>

<# var select = Element.AsSelectModel(); #>
<#
  var valueField = "";
  var labelField = "";
              
  var mappedColumn = select.InternalElement.Mappings.First().MappedEnds.FirstOrDefault(m => m.MappingTypeId == "74330c09-3675-4796-b7c9-8f5132b9c59b");
  
  foreach (var mapping in select.InternalElement.Mappings)
  {
    foreach (var mappingEnd in mapping.MappedEnds)
    {
      if (mappingEnd.TargetElement.SpecializationType == "Value")
      {
          valueField = mappingEnd.SourceElement.Name;
      }
    }
  }
#>
const <#= select.InternalElement.Name.ToPascalCase().ToCamelCase() #>Options = computed(() => {
  const options: { value: string; label: string }[] = [];
  if (data.value) {
    data.value.forEach((item: <#= select.Query.Mapping.Element.TypeReference.Element.Name #>) => {
<#
    var mappedExpression = mappedColumn.MappingExpression;
    foreach (var source in mappedColumn.Sources)
    {
        mappedExpression = mappedExpression.Replace($"{{{source.ExpressionIdentifier}}}", $"${{{source.Element.Name.ToPascalCase().ToCamelCase()}}}");
#>
      const <#= source.Element.Name.ToPascalCase().ToCamelCase() #> = item.<#= source.Element.Name.ToPascalCase().ToCamelCase() #> || '';
<#
    }
#>
      const mappedExpression = `<#= mappedExpression #>`;

      options.push({
        value: item.<#= valueField.ToPascalCase().ToCamelCase() #>,
        label: mappedExpression,
      });
    });
  }
  return options;
});
