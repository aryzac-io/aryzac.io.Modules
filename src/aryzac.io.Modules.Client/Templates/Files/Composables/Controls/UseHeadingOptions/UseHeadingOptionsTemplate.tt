<#@ template language="C#" inherits="TypeScriptTemplateBase<Aryzac.IO.Modules.Client.Api.HeadingModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Aryzac.IO.Modules.Client.Api" #>

import type { ComposerTranslation } from "@nuxtjs/i18n/dist/runtime/composables";
<#= DtoTypeImports #>

export const use<#= Model.InternalElement.GetFirstParentOfType(ComponentModel.SpecializationTypeId).Name.ToPascalCase()#><#= Model.Name.ToPascalCase() #>Options = async (
<# if (GetComponent().Parameters != null) { #>
  props: <#= GetComponent().Name #>Props, 
<# } #><# if (GetComponent().Model != null) { #>
  model: <#= GetComponent().Name #>Model, 
<# } #>  t: ComposerTranslation
) => {

<#= CommandAndQueryServiceProxyComposables #>

<#= Commands #>

<#= Actions #>

return {
<# if (HasActions()) { #>
	actions,
<# } #>
<# foreach (var command in HeadingCommands()) {#>
	<#= command.Mapping.Element.Name.ToPascalCase().ToCamelCase() #>
<# } #>
};

}
