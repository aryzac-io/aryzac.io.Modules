<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Intent.Modelers.Types.ServiceProxies.Api" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Modules.Common.TypeScript.Templates" #>
<#@ import namespace="Intent.Modules.Metadata.WebApi.Models" #>
<#@ import namespace="Intent.Templates" #>
<#@ import namespace="Aryzac.IO.Modules.Client.Api" #>

<# if (GetCommandModels().Any()) { #>
// Commands<# } #>
<#
  foreach (var command in GetCommandModels())
  {
    var endpoint = GetEndpointModel(command);#>
	
const <#= command.Mapping.Element.Name.ToPascalCase().ToCamelCase() #> = async (<#= string.Join(", ", GenerateFunctionParameters(command)) #>) => {

<#
	  foreach (var parameter in GetInputParameters(endpoint))
	  {
#>
  const command: <#= GetTypeName(parameter.TypeReference) #> = {
<#  
    foreach (var property in GetProperties(command))
    {
#>
    <#= property.Name.ToPascalCase().ToCamelCase() #>: model.<#= GetMappedName(property, command) #>,
<#
    }
#>
  };
<#
	  }
#>

	const <#= command.Mapping.Element.Name.ToPascalCase().ToCamelCase() #> = await <#= command.Mapping.Element.AsOperationModel().ParentService.Name.ToPascalCase().ToCamelCase() #>Proxy.<#= command.Mapping.Element.Name.ToPascalCase().ToCamelCase() #>(<#

	if (endpoint != null)
	{
	  foreach (var parameter in endpoint.Inputs)
	  {
	    #><#= parameter.Name.ToPascalCase().ToCamelCase() #><#
		if (endpoint.Inputs.Last() != parameter)
		{
		#>, <#
		}
	  }
	}
	#>);
};
<#   
  }
#>