<#@ template language="C#" inherits="ComponentTemplate" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Aryzac.IO.Modules.Client.Api" #>
<#@ import namespace="Intent.Modelers.Types.ServiceProxies.Api" #>
<#@ import namespace="Intent.Modules.Metadata.WebApi.Models" #>

<script setup lang="ts">

<#@ include file="./TypeImport.tt" #>

const { t } = useI18n();

<#@ include file="./Properties.tt" #>

<#
  foreach (var commandOrQuery in CommandsAndQueries)
  {
#>
const <#= commandOrQuery.Name.ToPascalCase().ToCamelCase() #>Proxy = use<#= commandOrQuery.Name.ToPascalCase() #>Proxy();
<#   
  }
#>

<#
  if (Queries.Any())
  {
#>
// Queries<#   
  }
#>

<#
  foreach (var query in Queries)
  {
#>const { 
  data: <#= query.InternalElement.ParentElement.Name.ToPascalCase().ToCamelCase() #><#= query.Mapping.Element.Name.ToPascalCase() #>Data, 
  pending: <#= query.InternalElement.ParentElement.Name.ToPascalCase().ToCamelCase() #><#= query.Mapping.Element.Name.ToPascalCase() #>Pending, 
  error: <#= query.InternalElement.ParentElement.Name.ToPascalCase().ToCamelCase() #><#= query.Mapping.Element.Name.ToPascalCase() #>Error , 
  execute: <#= query.InternalElement.ParentElement.Name.ToPascalCase().ToCamelCase() #><#= query.Mapping.Element.Name.ToPascalCase() #>Execute, 
  refresh: <#= query.InternalElement.ParentElement.Name.ToPascalCase().ToCamelCase() #><#= query.Mapping.Element.Name.ToPascalCase() #>Refresh, 
  status: <#= query.InternalElement.ParentElement.Name.ToPascalCase().ToCamelCase() #><#= query.Mapping.Element.Name.ToPascalCase() #>Status 
} = await <#= query.Mapping.Element.AsOperationModel().ParentService.Name.ToPascalCase().ToCamelCase() #>Proxy.<#= query.Mapping.Element.Name.ToPascalCase().ToCamelCase() #>(<#

	foreach (var mapping in query.InternalElement.Mappings)
    {
        foreach (var mappedEnd in mapping.MappedEnds)
        {
	      #>props.<#= mappedEnd.SourceElement.Name.ToPascalCase().ToCamelCase() #><#
          if (mapping.MappedEnds.Last() != mappedEnd)
		  {
		  #>, <#
		  }
	    }
	}
	#>);
<#   
  }
#>

<#
  if (Model.Model != null)
  {
#>
// Model
interface ModelInterface {
<#  
    foreach (var property in Model.Model.Properties)
    {
#>
  <#= property.Name.ToPascalCase().ToCamelCase() #><#= property.TypeReference.IsNullable ? "?" : "" #>: <#= GetTypeName(property.TypeReference) #>;
<#
    }
#>
}

const model: ModelInterface = reactive({
<#  
    foreach (var property in Model.Model.Properties)
    {
#>
  <#= property.Name.ToPascalCase().ToCamelCase() #>: "",
<#
    }
#>
});

<#   
    if (Model.Query != null)
    {
#>
watchEffect(async () => {
  if (<#= Model.Query.InternalElement.ParentElement.Name.ToPascalCase().ToCamelCase() #><#= Model.Query.Mapping.Element.Name.ToPascalCase() #>Data.value) {
<#  
      foreach (var property in Model.Model.Properties)
      {
#>
    model.<#= property.Name.ToPascalCase().ToCamelCase() #> = <#= Model.Query.InternalElement.ParentElement.Name.ToPascalCase().ToCamelCase() #><#= Model.Query.Mapping.Element.Name.ToPascalCase() #>Data.value.<#= GetMappedPropertyName(property) #>;
<#
      }
    }
#>
  }
});
<#
  }
#>

<#
  if (Commands.Any())
  {
#>
// Commands<#   
  }
#>

<#
  foreach (var command in Commands)
  {
    var endpoint = HttpEndpointModelFactory.GetEndpoint((IElement)command.Mapping.Element.AsOperationModel().Mapping.Element);
    var commandParameter = command.InternalElement.ChildElements.FirstOrDefault(m => m.SpecializationType == "Parameter" && m.Name == "command");
	
#>const <#= command.Mapping.Element.Name.ToPascalCase().ToCamelCase() #> = async (<#
	foreach (var mapping in command.InternalElement.Mappings.Where(m => m.TypeId == "0ca6626b-5dc2-42f4-a0dd-2ff7aabd684b"))
    {
        foreach (var mappedEnd in mapping.MappedEnds)
        {
            var source = "props";

            switch (mappedEnd.SourceElement.SpecializationType)
            {
                case "DTO-Field":
#><#= mappedEnd.TargetElement.Name.ToPascalCase().ToCamelCase() #>: <#= GetTypeName(mappedEnd.TargetElement.TypeReference) #><#
                if (mapping.MappedEnds.Last() != mappedEnd)
		        {
		          #>, <#
		        }
                    break;
            }
	    }
	}
#>) => {

<#
	  foreach (var parameter in endpoint.Inputs.Where(m => m.TypeReference.Element.SpecializationType == "Command"))
	  {
#>
  const command: <#= GetTypeName(parameter.TypeReference) #> = {
<#  
    foreach (var property in ((IElement)commandParameter.TypeReference.Element).ChildElements)
    {
#>
    <#= property.Name.ToPascalCase().ToCamelCase() #>: model.<#= GetMappedName(property, command) #>,
<#
    }
#>
  };
<#
	  }
#>

<#
	foreach (var mapping in command.InternalElement.Mappings.Where(m => m.TypeId == "0ca6626b-5dc2-42f4-a0dd-2ff7aabd684b"))
    {
        foreach (var mappedEnd in mapping.MappedEnds.Where(m => m.SourceElement.SpecializationType != "DTO-Field"))
        {
            var source = "props";

            switch (mappedEnd.SourceElement.SpecializationType)
            {
                case "Component Parameter":
                    source = "props";
                    break;
                case "Component Model Field":
                    source = "model";
                    break;
            }

	      #>  const <#= mappedEnd.TargetElement.Name.ToPascalCase().ToCamelCase() #> = <#= source #>.<#= mappedEnd.SourceElement.Name.ToPascalCase().ToCamelCase() #>;
          <#
	    }
	}
#>

	const <#= command.Mapping.Element.Name.ToPascalCase().ToCamelCase() #> = await <#= command.Mapping.Element.AsOperationModel().ParentService.Name.ToPascalCase().ToCamelCase() #>Proxy.<#= command.Mapping.Element.Name.ToPascalCase().ToCamelCase() #>(<#

	if (endpoint != null)
	{
	  foreach (var parameter in endpoint.Inputs)
	  {
	    #><#= parameter.Name.ToPascalCase().ToCamelCase() #><#
		if (endpoint.Inputs.Last() != parameter)
		{
		#>, <#
		}
	  }
	}
	#>);
};
<#   
  }
#>

<# 
if (Model.View != null)
{
  foreach (var component in Model.View.InternalElement.ChildElements)
  {    
#>

<#   
    if (component.IsHeadingModel()) // Heading
    {
#>


<#
    }
	else if (component.IsSectionModel()) // Section
    {
      var section = component.AsSectionModel();

      foreach (var control in section.InternalElement.ChildElements)
	  {
		if (control.IsTableModel()) 
		{
#>
<#
        }
#>
<#
        else if (control.IsSelectModel())
        {
#>
<#
        }
#>
<#
        else if (control.IsLabelModel())
        {
#>
// <#= control.Name #> Options
<#
          var label = control.AsLabelModel();
          var labelField = "";
            
          var mappedColumn = label.InternalElement.ParentElement.ParentElement.Mappings.First().MappedEnds.FirstOrDefault(m => m.MappingTypeId == "d9cb10dc-82ed-4378-8385-e9cc8be76c40" && m.TargetElement.SpecializationType == "Label" && m.TargetElement.Id == control.Id);
#>
const <#= label.InternalElement.Name.ToPascalCase().ToCamelCase() #>Label = computed(() => {
<#
          var mappedExpression = mappedColumn.MappingExpression;
          foreach (var source in mappedColumn.Sources)
          {
            mappedExpression = mappedExpression.Replace($"{{{source.ExpressionIdentifier}}}", $"${{{source.Element.Name.ToPascalCase().ToCamelCase()}}}");
#>
  const <#= source.Element.Name.ToPascalCase().ToCamelCase() #> = model.<#= source.Element.Name.ToPascalCase().ToCamelCase() #> || '';
<#
          }
#>
  const mappedExpression = `<#= mappedExpression #>`;
  return mappedExpression;
});
<#
        }
#>
<#
      }
#>
<#
	}
	else if (component.IsTableModel()) // Table
    {
#>


<# 
    }
  }
}
#>

onMounted(() => {
<#
  foreach (var query in Queries)
  {
#>
  <#= query.InternalElement.ParentElement.Name.ToPascalCase().ToCamelCase() #><#= query.Mapping.Element.Name.ToPascalCase() #>Execute();
<#
  }
#>
});
</script>
