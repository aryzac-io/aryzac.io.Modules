<#@ template language="C#" inherits="IntentTemplateBase<Aryzac.IO.Modules.Client.Api.ComponentModel>" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Intent.Modules.Common" #>
<#@ import namespace="Intent.Modules.Common.Templates" #>
<#@ import namespace="Intent.Metadata.Models" #>
<#@ import namespace="Aryzac.IO.Modules.Client.Api" #>
<#@ import namespace="Intent.Modelers.Types.ServiceProxies.Api" #>
<#@ import namespace="Intent.Modules.Metadata.WebApi.Models" #>

<i18n lang="yaml">
en:
<# 
if (Model.View != null)
{
  foreach (var component in Model.View.InternalElement.ChildElements)
  {
    
    if (component.IsHeadingModel()) // Heading
    {
      Model.View.Heading.TryGetHeadingSettings(out var headingSettings);
#>
  <#= Model.View.Heading.Name.ToCamelCase() #>:
    title: <#= headingSettings.Title() ?? Model.View.Heading.Name #>
<# 
      foreach (var attribute in Model.View.Heading.Attributes)
      {
#>
    attributes:
      <#= attribute.Name.ToCamelCase() #>Label: <#= attribute.Name ?? "''" #>
<#
       }
    }
    else if (component.IsSectionModel()) // Section
    {
      var section = component.AsSectionModel();
      section.TryGetSectionSettings(out var sectionSettings);
#>
  <#= component.Name.ToCamelCase() #>:
    title: <#= sectionSettings.Title() ?? component.Name #>
    description: <#= sectionSettings.Description() ?? "''" #>
<#
      foreach (var control in section.InternalElement.ChildElements)
	  {
#>
<#
		if (control.IsTextboxModel()) 
		{
          var textbox = control.AsTextboxModel();
          textbox.TryGetTextboxSettings(out var textboxSettings);
#>
    <#= control.Name.ToCamelCase() #>:
      label: <#= textboxSettings.Label() ?? control.Name #>
<#
        }
#>
<#
		if (control.IsTextAreaModel()) 
		{
          var textarea = control.AsTextAreaModel();
          textarea.TryGetTextAreaSettings(out var textareaSettings);
#>
    <#= control.Name.ToCamelCase() #>:
      label: <#= textareaSettings.Label() ?? control.Name #>
<#
        }
#>
<#
		if (control.IsCheckboxModel()) 
		{
          var checkbox = control.AsCheckboxModel();
          checkbox.TryGetCheckboxSettings(out var checkboxSettings);
#>
    <#= control.Name.ToCamelCase() #>:
      label: <#= checkboxSettings.Label() ?? control.Name #>
      description: <#= checkboxSettings.Description() ?? "''" #>
<#
        }
#>
<#
		if (control.IsLabelModel()) 
		{
          var label = control.AsLabelModel();
          label.TryGetLabelSettings(out var labelSettings);
#>
    <#= control.Name.ToCamelCase() #>:
      label: <#= labelSettings.Label() ?? control.Name #>
      body: <#= labelSettings.Body() ?? "''" #>
<#
        }
#>
<#
		if (control.IsRadioButtonModel()) 
		{
          var radioButton = control.AsRadioButtonModel();
          radioButton.TryGetRadioButtonSettings(out var radioButtonSettings);
#>
    <#= control.Name.ToCamelCase() #>:
      label: <#= radioButtonSettings.Label() ?? control.Name #>
<#
        }
#>
<#
		if (control.IsSelectModel()) 
		{
          var select = control.AsSelectModel();
          select.TryGetSelectSettings(out var selectSettings);
#>
    <#= control.Name.ToCamelCase() #>:
      label: <#= selectSettings.Label() ?? control.Name #>
<#
        }
#>
<#
		if (control.IsTableModel()) 
		{
          var table = control.AsTableModel();
#>    <#= table.Name.ToCamelCase() #>:
<#
          foreach (var column in table.Columns)
	      { 
#>      <#= column.Name.ToCamelCase()#>: <#= column.Name #>
<# 
	      }
        }
#>
<#
      }
#>
<# 
    }
	else if (component.IsTableModel()) // Table
    {
#>  <#= Model.View.Table.Name.ToCamelCase() #>:
<#
      foreach (var column in Model.View.Table.Columns)
	  { 
#>    <#= column.Name.ToCamelCase()#>: <#= column.Name #>
<# 
	  }
    }
  }
}
#>
    
</i18n>

<script setup lang="ts">
<#
  if (Model.Query != null)
  {
    var endpoint = HttpEndpointModelFactory.GetEndpoint((IElement)Model.Query.Mapping.Element.AsOperationModel().Mapping.Element);
	#>import type { <#= endpoint.ReturnType.Element.Name #> } from '~/structs/dto/<#= ((IElement)endpoint.ReturnType.Element).ParentElement.Name.ToPascalCase().ToCamelCase() #>/<#= ((IElement)endpoint.ReturnType.Element).MappedElement.Element.Name.ToKebabCase() #>.dto';<#
  }
#>

<# 
  if (Model.Command != null)
  {
    var endpoint = HttpEndpointModelFactory.GetEndpoint((IElement)Model.Command.Mapping.Element.AsOperationModel().Mapping.Element);
    if (endpoint.Inputs.FirstOrDefault(x => x.Source == HttpInputSource.FromBody) != null) 
    { 
        var bodyParam = endpoint.Inputs.First(x => x.Source == HttpInputSource.FromBody);
#>
import type { <#= endpoint.InternalElement.Name #> } from '~/structs/dto/<#= ((IElement)bodyParam.TypeReference.Element).ParentElement.Name.ToPascalCase().ToCamelCase() #>/<#= bodyParam.TypeReference.Element.Name.ToKebabCase() #>.dto';
<# 
    } 
  }
#>

const { t } = useI18n();

<# 
  if (Model.Parameters != null)
  {
    #>const props = defineProps<{
<#
    foreach (var parameter in Model.Parameters)
	{
	#>  <#= parameter.Name.ToPascalCase().ToCamelCase() #>: <#= this.GetTypeName(parameter.TypeReference) #>,
<#
	}
	#>}>();
	<#
  }
#>

<#
  if (Model.Query != null)
  { 
#>
const <#= Model.Query.Mapping.Element.AsOperationModel().ParentService.Name.ToCamelCase() #>Proxy = use<#= Model.Query.Mapping.Element.AsOperationModel().ParentService.Name.ToPascalCase() #>Proxy();
<#
  }
#>
<#
  if (Model.Query != null && Model.Command != null)
  {
    if (Model.Query.Mapping.Element.AsOperationModel().ParentService.Name.ToLower() != Model.Command.Mapping.Element.AsOperationModel().ParentService.Name.ToLower())
    {
#>
const <#= Model.Command.Mapping.Element.AsOperationModel().ParentService.Name.ToCamelCase() #>Proxy = use<#= Model.Command.Mapping.Element.AsOperationModel().ParentService.Name.ToPascalCase() #>Proxy();
<#
    }
  }
  else if (Model.Query == null && Model.Command != null)
  {
#>
const <#= Model.Command.Mapping.Element.AsOperationModel().ParentService.Name.ToCamelCase() #>Proxy = use<#= Model.Command.Mapping.Element.AsOperationModel().ParentService.Name.ToPascalCase() #>Proxy();
<#
  }
#>

<#
  if (Model.Query != null)
  {
    #>// Query
<#
	#>
const { data: <#= Model.Query.Mapping.Element.Name.ToCamelCase() #>Data, pending: <#= Model.Query.Mapping.Element.Name.ToCamelCase() #>Pending, error: <#= Model.Query.Mapping.Element.Name.ToCamelCase() #>Error } = await <#= Model.Query.Mapping.Element.AsOperationModel().ParentService.Name.ToCamelCase() #>Proxy.<#= Model.Query.Mapping.Element.Name.ToCamelCase() #>(<#

	var endpoint = HttpEndpointModelFactory.GetEndpoint((IElement)Model.Query.Mapping.Element.AsOperationModel().Mapping.Element);
		if (endpoint != null)
	{
	  foreach (var parameter in endpoint.Inputs)
	  {
	    #>props.<#= parameter.Name.ToPascalCase().ToCamelCase() #>, <#
	  }
	}
	#>);
<#
  }
#>

<#
  if (Model.Command != null)
  {
	var endpoint = HttpEndpointModelFactory.GetEndpoint((IElement)Model.Command.Mapping.Element.AsOperationModel().Mapping.Element);
    #>// Command
<#
#>const save = async (<#if (endpoint != null)
	{
	  foreach (var parameter in endpoint.Inputs)
	  {
	    #><#= parameter.Name.ToPascalCase().ToCamelCase() #>: <#= GetTypeName(parameter.TypeReference) #><#
		if (endpoint.Inputs.Last() != parameter)
		{
		#>, <#
		}
	  }
	}#>) => {
	const <#= Model.Command.Mapping.Element.Name.ToCamelCase() #> = await <#= Model.Command.Mapping.Element.AsOperationModel().ParentService.Name.ToCamelCase() #>Proxy.<#= Model.Command.Mapping.Element.Name.ToCamelCase() #>(<#

	if (endpoint != null)
	{
	  foreach (var parameter in endpoint.Inputs)
	  {
	    #><#= parameter.Name.ToPascalCase().ToCamelCase() #><#
		if (endpoint.Inputs.Last() != parameter)
		{
		#>, <#
		}
	  }
	}
	#>);
};
<#
  }
#>
<# 
if (Model.View != null)
{
  foreach (var component in Model.View.InternalElement.ChildElements)
  {    
    if (component.IsHeadingModel()) // Heading
    {
#>
const <#= Model.View.Heading.Name.ToCamelCase() #>Attributes = computed(() => [
<# 
      foreach (var attribute in Model.View.Heading.Attributes)
      {
        attribute.TryGetAttributeSettings(out var attributeSettings);
#>
  {
	icon: '<#= attributeSettings.Icon() #>',
	label: t("<#= Model.View.Heading.Name.ToCamelCase() #>.attributes.<#= attribute.Name.ToCamelCase() #>Label"),
  },
<#
       }
#>]
);

const <#= Model.View.Heading.Name.ToCamelCase() #>Actions = computed(() => [
  {
    label: "Create Invoice",
    icon: "heroicons:plus",
    function: async () => {
      await navigateTo(`/clients/${props.clientId}/invoices/create`);
    },
  },
]);

<#
    }
	else if (component.IsSectionModel()) // Section
    {
      var section = component.AsSectionModel();

      foreach (var control in section.InternalElement.ChildElements)
	  {
#>
<#
		if (control.IsTableModel()) 
		{
          var table = control.AsTableModel();
#>
const <#= table.Name.ToCamelCase() #>Headers = [
<# 
foreach (var column in table.Columns)
{
#>
  {
	key: '<#= column.Name.ToCamelCase() #>',
	label: t("<#= component.Name.ToCamelCase() #>.<#= table.Name.ToCamelCase() #>.<#= column.Name.ToCamelCase() #>"),
  },
<#
}
#>];
<#
        }
      }
#>
<#
	}
	else if (component.IsTableModel()) // Table
    {
#>

// Table Options
const <#= Model.View.Table.Name.ToCamelCase() #>Headers = [
<# 
foreach (var column in Model.View.Table.Columns)
{
#>
  {
	key: '<#= column.Name.ToCamelCase() #>',
	label: t("<#= Model.View.Table.Name.ToCamelCase() #>.<#= column.Name.ToCamelCase() #>"),
  },
<#
}
#>];

<# 
    }
  }
}
#>
</script>

<template>
<# 
if (Model.View != null)
{
  foreach (var component in Model.View.InternalElement.ChildElements)
  {
    if (component.IsHeadingModel()) // Heading
    {
#>
  <ui-heading-page
    :title="t('<#= Model.View.Heading.Name.ToCamelCase() #>.title')"
    :attributes="<#= Model.View.Heading.Name.ToCamelCase() #>Attributes"
    :actions="<#= Model.View.Heading.Name.ToCamelCase() #>Actions"
  />
<#
    }
    else if (component.IsSectionModel()) // Section
    {
      var section = component.AsSectionModel();
#>
  <ui-editor-section
    :title="t('<#= component.Name.ToCamelCase() #>.title')"
    :description="t('<#= component.Name.ToCamelCase() #>.description')"
  >
<#
      foreach (var control in section.InternalElement.ChildElements)
	  {
#>
<#
		if (control.IsTextboxModel()) 
		{
#>
     <ui-input-textbox :label="t('<#= component.Name.ToCamelCase() #>.<#= control.Name.ToCamelCase() #>.label')" />
<#
        }
#>
<#
		if (control.IsTextAreaModel()) 
		{
#>
     <ui-input-text-area :label="t('<#= component.Name.ToCamelCase() #>.<#= control.Name.ToCamelCase() #>.label')" />
<#
        }
#>
<#
		if (control.IsCheckboxModel()) 
		{
#>
     <ui-input-checkbox :label="t('<#= component.Name.ToCamelCase() #>.<#= control.Name.ToCamelCase() #>.label')" :description="t('<#= component.Name.ToCamelCase() #>.<#= control.Name.ToCamelCase() #>.description')" />
<#
        }
#>
<#
		if (control.IsLabelModel()) 
		{
#>
     <ui-input-label :label="t('<#= component.Name.ToCamelCase() #>.<#= control.Name.ToCamelCase() #>.label')" :body="t('<#= component.Name.ToCamelCase() #>.<#= control.Name.ToCamelCase() #>.body')" />
<#
        }
#>
<#
		if (control.IsRadioButtonModel()) 
		{
#>
     <ui-input-radio-button :label="t('<#= component.Name.ToCamelCase() #>.<#= control.Name.ToCamelCase() #>.label')" />
<#
        }
#>
<#
		if (control.IsSelectModel()) 
		{
#>
     <ui-input-select :label="t('<#= component.Name.ToCamelCase() #>.<#= control.Name.ToCamelCase() #>.label')" />
<#
        }
#>
<#
		if (control.IsTableModel()) 
		{
#>
  <ui-view-table
    :items="<#= Model.Query.Mapping.Element.Name.ToCamelCase() #>Data"
    :headers="<#= control.Name.ToCamelCase() #>Headers"
    key="id"
  />
<#
        }
#>
<#
      }
#>
  </ui-editor-section>
<#
	}
	else if (component.IsTableModel()) // Table
    {
#>
  <ui-view-table
    :items="<#= Model.Query.Mapping.Element.Name.ToCamelCase() #>Data"
    :headers="<#= Model.View.Table.Name.ToCamelCase() #>Headers"
    key="id"
  />
<# 
    }
  }
}
#>
</template>